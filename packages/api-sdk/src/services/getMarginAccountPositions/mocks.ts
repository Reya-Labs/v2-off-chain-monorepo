const randomValue = () =>
  (Math.random() * 100 > 50 ? -1 : 1) * Math.random() * (1e7 - 1e3) + 1e3;
const randomValue2 = () => Math.random() * (1e4 - 100) + 100;
const randomDate = () =>
  new Date('2023-09-01').valueOf() -
  (Math.random() * (35 - 5) + 5) * 60 * 60 * 24 * 1000;
const randomDate2 = () =>
  new Date('2023-05-01').valueOf() -
  (Math.random() * (35 - 5) + 5) * 60 * 60 * 24 * 1000;
const randomValue3 = () => parseFloat((Math.random() * 1e2).toFixed(2));
const randomHealth = () => {
  return Math.random() * 100 > 50
    ? 'healthy'
    : Math.random() * 100 > 50
    ? 'danger'
    : 'warning';
};
export const getPositionsMock = () =>
  [
    {
      type: 'LP',
      id: '1',
      pool: {
        id: '1',
        chainId: 1,
        market: 'Aave V2',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'eth',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: false,
        isV2: false,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'matured',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Variable',
      id: '2',
      pool: {
        id: '2',
        chainId: 1,
        market: 'Compound',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdc',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: true,
        isV2: true,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Fixed',
      id: '3',
      pool: {
        id: '3',
        chainId: 43114,
        market: 'Lido',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'eth',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: false,
        isV2: true,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Variable',
      id: '4',
      pool: {
        id: '4',
        chainId: 43114,
        market: 'Rocket',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'dai',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: true,
        isV2: false,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Fixed',
      id: '5',
      pool: {
        id: '5',
        chainId: 42161,
        market: 'GMX:GLP',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'eth',
        },
        rateOracle: {
          protocolId: 1,
          address: '1',
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: true,
        isV2: false,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'LP',
      id: '6',
      pool: {
        id: '6',
        chainId: 42161,
        market: 'SOFR',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdt',
        },
        rateOracle: {
          protocolId: 1,
          address: '1',
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: false,
        isV2: false,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'settled',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'LP',
      id: '7',
      pool: {
        id: '7',
        chainId: 1,
        market: 'Aave V3',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdc',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: true,
        isAaveV3: true,
        isV2: false,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Fixed',
      id: '8',
      pool: {
        id: '8',
        chainId: 43114,
        market: 'Compound',
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdt',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: false,
        isV2: true,
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Variable',
      id: '9',
      pool: {
        id: '9',
        market: 'Lido',
        chainId: 42161,
        isBorrowing: true,
        isAaveV3: true,
        isV2: true,
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdt',
        },
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'Fixed',
      id: '10',
      notional: randomValue2(),
      margin: randomValue2(),
      pool: {
        id: '10',
        market: 'Rocket',
        chainId: 1,
        rateOracle: {
          address: '1',
          protocolId: 1,
        },
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'eth',
        },
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: false,
        isV2: false,
      },
      status: {
        health: randomHealth(),
        variant: 'matured',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
    {
      type: 'LP',
      id: '11',
      pool: {
        id: '11',
        market: 'GMX:GLP',
        chainId: 43114,
        termEndTimestampInMS: randomDate(),
        termStartTimestampInMS: randomDate2(),
        isBorrowing: true,
        isV2: false,
        rateOracle: {
          protocolId: 1,
          address: '1',
        },
        underlyingToken: {
          address: '1',
          tokenDecimals: 2,
          priceUSD: 10,
          name: 'usdc',
        },
      },
      notional: randomValue2(),
      margin: randomValue2(),
      status: {
        health: randomHealth(),
        variant: 'active',
        currentFixed: randomValue3(),
        receiving: randomValue3(),
        paying: randomValue3(),
        fixLow: randomValue3(),
        fixHigh: randomValue3(),
      },
      unrealizedPNL: randomValue(),
      realizedPNLTotal: randomValue(),
      realizedPNLFees: randomValue(),
      realizedPNLCashflow: randomValue(),
      unrealizedPNLUSD: randomValue(),
      realizedPNLTotalUSD: randomValue(),
      realizedPNLFeesUSD: randomValue(),
      realizedPNLCashflowUSD: randomValue(),
    },
  ].slice(0, getRandomIntInclusive(5, 11)) as never;

// The maximum is inclusive and the minimum is inclusive
function getRandomIntInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1) + min);
}
